/*! For license information please see 446.20a0cf08.js.LICENSE.txt */
(self.webpackChunkreact_frontend=self.webpackChunkreact_frontend||[]).push([[446],{446:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n(7294),o=(n(2043),n(4184)),a=n.n(o),c=n(5893);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);c=!0);}catch(e){i=!0,o=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const u=function(e){var t=i((0,r.useState)(""),2),n=t[0],o=t[1],s=i((0,r.useState)(!1),2),u=s[0],l=s[1],f=a()({"test-exercise-manager-message":!0,error:u});return(0,c.jsxs)(r.Fragment,{children:[(0,c.jsx)("div",{className:"test-exercise-manager",onClick:function(e){RoboticsExerciseComponents.commsManager.connect().then((function(e){o("Connected"),l(!1)})).catch((function(e){o("Message not received, reason: ".concat(e.data.message)),l(!0)}))},children:"Connect"}),(0,c.jsx)("div",{className:"test-exercise-manager",onClick:function(e){var t=JSON.parse(document.getElementById("exercise-config").textContent);RoboticsExerciseComponents.commsManager.launch(t).then((function(e){o("Ready"),l(!1)})).catch((function(e){o("Message not received, reason: ".concat(e.data.message)),l(!0)}))},children:"Launch"}),(0,c.jsx)("div",{className:f,children:n})]})}},4184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"===a||"number"===a)e.push(n);else if(Array.isArray(n)){if(n.length){var c=o.apply(null,n);c&&e.push(c)}}else if("object"===a){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){e.push(n.toString());continue}for(var i in n)r.call(n,i)&&n[i]&&e.push(i)}}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvNDQ2LmJjMmVhMzkzLmpzIiwibWFwcGluZ3MiOiI7K25DQWlEQSxRQTFDNEIsU0FBQ0EsR0FDM0IsSUFBMEMsS0FBWkMsRUFBQUEsRUFBQUEsVUFBUyxJQUFHLEdBQW5DQyxFQUFPLEtBQUVDLEVBQVUsS0FDbUIsS0FBZkYsRUFBQUEsRUFBQUEsV0FBUyxHQUFNLEdBQXRDRyxFQUFPLEtBQUVDLEVBQVUsS0FDcEJDLEVBQVVDLElBQVcsQ0FDekIsaUNBQWlDLEVBQ2pDLE1BQVNILElBMkJYLE9BQ0ksVUFBQyxFQUFBSSxTQUFRLFlBQ1AsZ0JBQUtDLFVBQVcsd0JBQXlCQyxRQWIvQixTQUFDQyxHQUNmQywyQkFBMkJDLGFBQWFDLFVBQ3ZDQyxNQUFLLFNBQUNiLEdBQ0xDLEVBQVcsYUFDWEUsR0FBVyxFQUNiLElBQUUsT0FBTyxTQUFDVyxHQUNSYixFQUFXLGlDQUFELE9BQWtDYSxFQUFTQyxLQUFLZixVQUMxREcsR0FBVyxFQUNiLEdBQ0YsRUFJZ0UsU0FBQyxhQUMzRCxnQkFBS0ksVUFBVyx3QkFBeUJDLFFBM0JoQyxTQUFDQyxHQUNkLElBQU1PLEVBQVNDLEtBQUtDLE1BQU1DLFNBQVNDLGVBQWUsbUJBQW1CQyxhQUVyRVgsMkJBQTJCQyxhQUFhVyxPQUFPTixHQUM5Q0gsTUFBSyxTQUFDYixHQUNMQyxFQUFXLFNBQ1hFLEdBQVcsRUFDYixJQUFFLE9BQU8sU0FBQ1csR0FDUmIsRUFBVyxpQ0FBRCxPQUFrQ2EsRUFBU0MsS0FBS2YsVUFDMURHLEdBQVcsRUFDYixHQUNGLEVBZ0IrRCxTQUFDLFlBRTFELGdCQUFLSSxVQUFXSCxFQUFRLFNBQUVKLE1BR2xDLGdCQy9DQSxPQU9DLFdBQ0EsYUFFQSxJQUFJdUIsRUFBUyxDQUFDLEVBQUVDLGVBR2hCLFNBQVNuQixJQUdSLElBRkEsSUFBSUQsRUFBVSxHQUVMcUIsRUFBSSxFQUFHQSxFQUFJQyxVQUFVQyxPQUFRRixJQUFLLENBQzFDLElBQUlHLEVBQU1GLFVBQVVELEdBQ3BCLEdBQUtHLEVBQUwsQ0FFQSxJQUFJQyxTQUFpQkQsRUFFckIsR0FBZ0IsV0FBWkMsR0FBb0MsV0FBWkEsRUFDM0J6QixFQUFRMEIsS0FBS0YsUUFDUCxHQUFJRyxNQUFNQyxRQUFRSixJQUN4QixHQUFJQSxFQUFJRCxPQUFRLENBQ2YsSUFBSU0sRUFBUTVCLEVBQVc2QixNQUFNLEtBQU1OLEdBQy9CSyxHQUNIN0IsRUFBUTBCLEtBQUtHLEVBRWYsT0FDTSxHQUFnQixXQUFaSixFQUFzQixDQUNoQyxHQUFJRCxFQUFJTyxXQUFhQyxPQUFPQyxVQUFVRixXQUFhUCxFQUFJTyxTQUFTQSxXQUFXRyxTQUFTLGlCQUFrQixDQUNyR2xDLEVBQVEwQixLQUFLRixFQUFJTyxZQUNqQixRQUNELENBRUEsSUFBSyxJQUFJSSxLQUFPWCxFQUNYTCxFQUFPaUIsS0FBS1osRUFBS1csSUFBUVgsRUFBSVcsSUFDaENuQyxFQUFRMEIsS0FBS1MsRUFHaEIsQ0F4QmtCLENBeUJuQixDQUVBLE9BQU9uQyxFQUFRcUMsS0FBSyxJQUNyQixDQUVxQ0MsRUFBT0MsU0FDM0N0QyxFQUFXdUMsUUFBVXZDLEVBQ3JCcUMsRUFBT0MsUUFBVXRDLFFBS2hCLEtBRndCLEVBQUYsV0FDdEIsT0FBT0EsQ0FDUCxVQUZvQixPQUVwQixZQUlILENBcERBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3RfZnJvbnRlbmQvLi4vZXhlcmNpc2VzL3N0YXRpYy9leGVyY2lzZXMvZm9sbG93X2xpbmVfbmV3bWFuYWdlci93ZWItdGVtcGxhdGUvcmVhY3QtY29tcG9uZW50cy9UZXN0RXhlcmNpc2VNYW5hZ2VyLmpzIiwid2VicGFjazovL3JlYWN0X2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtGcmFnbWVudCwgdXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgJy4vY3NzL1Rlc3RFeGVyY2lzZU1hbmFnZXIuY3NzJztcblxuY29uc3QgVGVzdEV4ZXJjaXNlTWFuYWdlciA9IChwcm9wcykgPT4ge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW2lzZXJyb3IsIHNldElzZXJyb3JdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyh7XG4gICAgXCJ0ZXN0LWV4ZXJjaXNlLW1hbmFnZXItbWVzc2FnZVwiOiB0cnVlLFxuICAgIFwiZXJyb3JcIjogaXNlcnJvclxuICB9KTtcblxuICBjb25zdCBsYXVuY2ggPSAoY29tbWFuZCkgPT4ge1xuICAgIGNvbnN0IGNvbmZpZyA9IEpTT04ucGFyc2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJleGVyY2lzZS1jb25maWdcIikudGV4dENvbnRlbnQpO1xuXG4gICAgUm9ib3RpY3NFeGVyY2lzZUNvbXBvbmVudHMuY29tbXNNYW5hZ2VyLmxhdW5jaChjb25maWcpXG4gICAgLnRoZW4oKG1lc3NhZ2UpID0+IHtcbiAgICAgIHNldE1lc3NhZ2UoXCJSZWFkeVwiKTtcbiAgICAgIHNldElzZXJyb3IoZmFsc2UpO1xuICAgIH0pLmNhdGNoKChyZXNwb25zZSkgPT4ge1xuICAgICAgc2V0TWVzc2FnZShgTWVzc2FnZSBub3QgcmVjZWl2ZWQsIHJlYXNvbjogJHtyZXNwb25zZS5kYXRhLm1lc3NhZ2V9YCk7XG4gICAgICBzZXRJc2Vycm9yKHRydWUpO1xuICAgIH0pXG4gIH07XG5cbiAgY29uc3QgY29ubmVjdCA9IChjb21tYW5kKSA9PiB7XG4gICAgUm9ib3RpY3NFeGVyY2lzZUNvbXBvbmVudHMuY29tbXNNYW5hZ2VyLmNvbm5lY3QoKVxuICAgIC50aGVuKChtZXNzYWdlKSA9PiB7XG4gICAgICBzZXRNZXNzYWdlKFwiQ29ubmVjdGVkXCIpO1xuICAgICAgc2V0SXNlcnJvcihmYWxzZSk7XG4gICAgfSkuY2F0Y2goKHJlc3BvbnNlKSA9PiB7XG4gICAgICBzZXRNZXNzYWdlKGBNZXNzYWdlIG5vdCByZWNlaXZlZCwgcmVhc29uOiAke3Jlc3BvbnNlLmRhdGEubWVzc2FnZX1gKTtcbiAgICAgIHNldElzZXJyb3IodHJ1ZSk7XG4gICAgfSlcbiAgfTtcblxuICByZXR1cm4gKFxuICAgICAgPEZyYWdtZW50PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJ0ZXN0LWV4ZXJjaXNlLW1hbmFnZXJcIn0gb25DbGljaz17Y29ubmVjdH0+Q29ubmVjdDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJ0ZXN0LWV4ZXJjaXNlLW1hbmFnZXJcIn0gb25DbGljaz17bGF1bmNofT5MYXVuY2g8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzfT57bWVzc2FnZX08L2Rpdj5cbiAgICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUZXN0RXhlcmNpc2VNYW5hZ2VyOyIsIi8qIVxuXHRDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cblx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcblx0aHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIG5hdGl2ZUNvZGVTdHJpbmcgPSAnW25hdGl2ZSBjb2RlXSc7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nICYmICFhcmcudG9TdHJpbmcudG9TdHJpbmcoKS5pbmNsdWRlcygnW25hdGl2ZSBjb2RlXScpKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iXSwibmFtZXMiOlsicHJvcHMiLCJ1c2VTdGF0ZSIsIm1lc3NhZ2UiLCJzZXRNZXNzYWdlIiwiaXNlcnJvciIsInNldElzZXJyb3IiLCJjbGFzc2VzIiwiY2xhc3NOYW1lcyIsIkZyYWdtZW50IiwiY2xhc3NOYW1lIiwib25DbGljayIsImNvbW1hbmQiLCJSb2JvdGljc0V4ZXJjaXNlQ29tcG9uZW50cyIsImNvbW1zTWFuYWdlciIsImNvbm5lY3QiLCJ0aGVuIiwicmVzcG9uc2UiLCJkYXRhIiwiY29uZmlnIiwiSlNPTiIsInBhcnNlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInRleHRDb250ZW50IiwibGF1bmNoIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJnIiwiYXJnVHlwZSIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJpbm5lciIsImFwcGx5IiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJpbmNsdWRlcyIsImtleSIsImNhbGwiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9