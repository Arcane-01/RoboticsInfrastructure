/*! For license information please see 419.8c96c2e3.js.LICENSE.txt */
(self.webpackChunkreact_frontend=self.webpackChunkreact_frontend||[]).push([[419],{419:(n,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>u});var r=e(7294),i=e(4184),o=e.n(i),a=e(5893);function c(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,i,o=[],a=!0,c=!1;try{for(e=e.call(n);!(a=(r=e.next()).done)&&(o.push(r.value),!t||o.length!==t);a=!0);}catch(n){c=!0,i=n}finally{try{a||null==e.return||e.return()}finally{if(c)throw i}}return o}}(n,t)||function(n,t){if(n){if("string"==typeof n)return l(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?l(n,t):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}const u=function(n){var t=c((0,r.useState)("idle"),2),e=t[0],i=t[1],l=c((0,r.useState)(!1),2),u=l[0],s=l[1],f=o()({"test-loader":!0,disabled:u}),d=o()({"lds-ring":!0,hidden:!u});return(0,a.jsxs)("div",{className:"parent-block",children:[(0,a.jsx)("div",{className:f,onClick:function(n){"idle"===e?(s(!0),RoboticsExerciseComponents.commsManager.connect().then((function(n){i("connected")})).catch((function(n){})).finally((function(){s(!1)}))):"connected"===e?function(){s(!0);var n=JSON.parse(document.getElementById("exercise-config").textContent);n.application.params={circuit:"default"};var t=n.launch[0].launch_file.interpolate({circuit:"default"});n.launch[0].launch_file=t,RoboticsExerciseComponents.commsManager.launch(n).then((function(n){i("ready")})).catch((function(n){})).finally((function(){s(!1)}))}():"ready"===e&&(s(!0),RoboticsExerciseComponents.commsManager.terminate().then((function(n){i("connected")})).catch((function(n){})).finally((function(){s(!1)})))},children:"idle"===e?"Connect":"connected"===e?"Launch":"ready"===e?"Terminate":void 0}),(0,a.jsxs)("div",{className:d,children:[(0,a.jsx)("div",{}),(0,a.jsx)("div",{}),(0,a.jsx)("div",{}),(0,a.jsx)("div",{})]})]})}},4184:(n,t)=>{var e;!function(){"use strict";var r={}.hasOwnProperty;function i(){for(var n=[],t=0;t<arguments.length;t++){var e=arguments[t];if(e){var o=typeof e;if("string"===o||"number"===o)n.push(e);else if(Array.isArray(e)){if(e.length){var a=i.apply(null,e);a&&n.push(a)}}else if("object"===o){if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]")){n.push(e.toString());continue}for(var c in e)r.call(e,c)&&e[c]&&n.push(c)}}}return n.join(" ")}n.exports?(i.default=i,n.exports=i):void 0===(e=function(){return i}.apply(t,[]))||(n.exports=e)}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,